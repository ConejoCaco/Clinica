#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clinica
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Clinica")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertAdministrador(Administrador instance);
    partial void UpdateAdministrador(Administrador instance);
    partial void DeleteAdministrador(Administrador instance);
    partial void InsertCitas(Citas instance);
    partial void UpdateCitas(Citas instance);
    partial void DeleteCitas(Citas instance);
    partial void InsertEspecialidades(Especialidades instance);
    partial void UpdateEspecialidades(Especialidades instance);
    partial void DeleteEspecialidades(Especialidades instance);
    partial void InsertHistorial_Medico(Historial_Medico instance);
    partial void UpdateHistorial_Medico(Historial_Medico instance);
    partial void DeleteHistorial_Medico(Historial_Medico instance);
    partial void InsertMedicos(Medicos instance);
    partial void UpdateMedicos(Medicos instance);
    partial void DeleteMedicos(Medicos instance);
    partial void InsertPacientes(Pacientes instance);
    partial void UpdatePacientes(Pacientes instance);
    partial void DeletePacientes(Pacientes instance);
    partial void InsertSecretarios(Secretarios instance);
    partial void UpdateSecretarios(Secretarios instance);
    partial void DeleteSecretarios(Secretarios instance);
    partial void InsertTelefonos(Telefonos instance);
    partial void UpdateTelefonos(Telefonos instance);
    partial void DeleteTelefonos(Telefonos instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Clinica.Properties.Settings.Default.ClinicaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Administrador> Administrador
		{
			get
			{
				return this.GetTable<Administrador>();
			}
		}
		
		public System.Data.Linq.Table<Citas> Citas
		{
			get
			{
				return this.GetTable<Citas>();
			}
		}
		
		public System.Data.Linq.Table<Especialidades> Especialidades
		{
			get
			{
				return this.GetTable<Especialidades>();
			}
		}
		
		public System.Data.Linq.Table<Historial_Medico> Historial_Medico
		{
			get
			{
				return this.GetTable<Historial_Medico>();
			}
		}
		
		public System.Data.Linq.Table<Medicos> Medicos
		{
			get
			{
				return this.GetTable<Medicos>();
			}
		}
		
		public System.Data.Linq.Table<Pacientes> Pacientes
		{
			get
			{
				return this.GetTable<Pacientes>();
			}
		}
		
		public System.Data.Linq.Table<Secretarios> Secretarios
		{
			get
			{
				return this.GetTable<Secretarios>();
			}
		}
		
		public System.Data.Linq.Table<Telefonos> Telefonos
		{
			get
			{
				return this.GetTable<Telefonos>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrador")]
	public partial class Administrador : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Usuario;
		
		private string _Password;
		
		private string _Rut;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUsuarioChanging(string value);
    partial void OnUsuarioChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRutChanging(string value);
    partial void OnRutChanged();
    #endregion
		
		public Administrador()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usuario", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Usuario
		{
			get
			{
				return this._Usuario;
			}
			set
			{
				if ((this._Usuario != value))
				{
					this.OnUsuarioChanging(value);
					this.SendPropertyChanging();
					this._Usuario = value;
					this.SendPropertyChanged("Usuario");
					this.OnUsuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rut", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Rut
		{
			get
			{
				return this._Rut;
			}
			set
			{
				if ((this._Rut != value))
				{
					this.OnRutChanging(value);
					this.SendPropertyChanging();
					this._Rut = value;
					this.SendPropertyChanged("Rut");
					this.OnRutChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Citas")]
	public partial class Citas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _Fecha;
		
		private System.TimeSpan _Hora;
		
		private System.Nullable<int> _ID_Medico;
		
		private System.Nullable<int> _ID_Secretario;
		
		private int _ID_Paciente;
		
		private EntitySet<Historial_Medico> _Historial_Medico;
		
		private EntityRef<Medicos> _Medicos;
		
		private EntityRef<Pacientes> _Pacientes;
		
		private EntityRef<Secretarios> _Secretarios;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnHoraChanging(System.TimeSpan value);
    partial void OnHoraChanged();
    partial void OnID_MedicoChanging(System.Nullable<int> value);
    partial void OnID_MedicoChanged();
    partial void OnID_SecretarioChanging(System.Nullable<int> value);
    partial void OnID_SecretarioChanged();
    partial void OnID_PacienteChanging(int value);
    partial void OnID_PacienteChanged();
    #endregion
		
		public Citas()
		{
			this._Historial_Medico = new EntitySet<Historial_Medico>(new Action<Historial_Medico>(this.attach_Historial_Medico), new Action<Historial_Medico>(this.detach_Historial_Medico));
			this._Medicos = default(EntityRef<Medicos>);
			this._Pacientes = default(EntityRef<Pacientes>);
			this._Secretarios = default(EntityRef<Secretarios>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fecha", DbType="Date NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hora", DbType="Time NOT NULL")]
		public System.TimeSpan Hora
		{
			get
			{
				return this._Hora;
			}
			set
			{
				if ((this._Hora != value))
				{
					this.OnHoraChanging(value);
					this.SendPropertyChanging();
					this._Hora = value;
					this.SendPropertyChanged("Hora");
					this.OnHoraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Medico", DbType="Int")]
		public System.Nullable<int> ID_Medico
		{
			get
			{
				return this._ID_Medico;
			}
			set
			{
				if ((this._ID_Medico != value))
				{
					if (this._Medicos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_MedicoChanging(value);
					this.SendPropertyChanging();
					this._ID_Medico = value;
					this.SendPropertyChanged("ID_Medico");
					this.OnID_MedicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Secretario", DbType="Int")]
		public System.Nullable<int> ID_Secretario
		{
			get
			{
				return this._ID_Secretario;
			}
			set
			{
				if ((this._ID_Secretario != value))
				{
					this.OnID_SecretarioChanging(value);
					this.SendPropertyChanging();
					this._ID_Secretario = value;
					this.SendPropertyChanged("ID_Secretario");
					this.OnID_SecretarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Paciente", DbType="Int NOT NULL")]
		public int ID_Paciente
		{
			get
			{
				return this._ID_Paciente;
			}
			set
			{
				if ((this._ID_Paciente != value))
				{
					if ((this._Pacientes.HasLoadedOrAssignedValue || this._Secretarios.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PacienteChanging(value);
					this.SendPropertyChanging();
					this._ID_Paciente = value;
					this.SendPropertyChanged("ID_Paciente");
					this.OnID_PacienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Citas_Historial_Medico", Storage="_Historial_Medico", ThisKey="id", OtherKey="ID_Cita")]
		public EntitySet<Historial_Medico> Historial_Medico
		{
			get
			{
				return this._Historial_Medico;
			}
			set
			{
				this._Historial_Medico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_Citas", Storage="_Medicos", ThisKey="ID_Medico", OtherKey="id", IsForeignKey=true)]
		public Medicos Medicos
		{
			get
			{
				return this._Medicos.Entity;
			}
			set
			{
				Medicos previousValue = this._Medicos.Entity;
				if (((previousValue != value) 
							|| (this._Medicos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicos.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._Medicos.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._ID_Medico = value.id;
					}
					else
					{
						this._ID_Medico = default(Nullable<int>);
					}
					this.SendPropertyChanged("Medicos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Citas", Storage="_Pacientes", ThisKey="ID_Paciente", OtherKey="id", IsForeignKey=true)]
		public Pacientes Pacientes
		{
			get
			{
				return this._Pacientes.Entity;
			}
			set
			{
				Pacientes previousValue = this._Pacientes.Entity;
				if (((previousValue != value) 
							|| (this._Pacientes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacientes.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._Pacientes.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._ID_Paciente = value.id;
					}
					else
					{
						this._ID_Paciente = default(int);
					}
					this.SendPropertyChanged("Pacientes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Secretarios_Citas", Storage="_Secretarios", ThisKey="ID_Paciente", OtherKey="id", IsForeignKey=true)]
		public Secretarios Secretarios
		{
			get
			{
				return this._Secretarios.Entity;
			}
			set
			{
				Secretarios previousValue = this._Secretarios.Entity;
				if (((previousValue != value) 
							|| (this._Secretarios.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Secretarios.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._Secretarios.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._ID_Paciente = value.id;
					}
					else
					{
						this._ID_Paciente = default(int);
					}
					this.SendPropertyChanged("Secretarios");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Historial_Medico(Historial_Medico entity)
		{
			this.SendPropertyChanging();
			entity.Citas = this;
		}
		
		private void detach_Historial_Medico(Historial_Medico entity)
		{
			this.SendPropertyChanging();
			entity.Citas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Especialidades")]
	public partial class Especialidades : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Especialidad;
		
		private EntitySet<Medicos> _Medicos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEspecialidadChanging(string value);
    partial void OnEspecialidadChanged();
    #endregion
		
		public Especialidades()
		{
			this._Medicos = new EntitySet<Medicos>(new Action<Medicos>(this.attach_Medicos), new Action<Medicos>(this.detach_Medicos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Especialidad", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Especialidad
		{
			get
			{
				return this._Especialidad;
			}
			set
			{
				if ((this._Especialidad != value))
				{
					this.OnEspecialidadChanging(value);
					this.SendPropertyChanging();
					this._Especialidad = value;
					this.SendPropertyChanged("Especialidad");
					this.OnEspecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidades_Medicos", Storage="_Medicos", ThisKey="id", OtherKey="ID_Especialidad")]
		public EntitySet<Medicos> Medicos
		{
			get
			{
				return this._Medicos;
			}
			set
			{
				this._Medicos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medicos(Medicos entity)
		{
			this.SendPropertyChanging();
			entity.Especialidades = this;
		}
		
		private void detach_Medicos(Medicos entity)
		{
			this.SendPropertyChanging();
			entity.Especialidades = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Historial Medico]")]
	public partial class Historial_Medico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Diagnostico;
		
		private string _Alergias;
		
		private int _ID_Cita;
		
		private EntityRef<Citas> _Citas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDiagnosticoChanging(string value);
    partial void OnDiagnosticoChanged();
    partial void OnAlergiasChanging(string value);
    partial void OnAlergiasChanged();
    partial void OnID_CitaChanging(int value);
    partial void OnID_CitaChanged();
    #endregion
		
		public Historial_Medico()
		{
			this._Citas = default(EntityRef<Citas>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnostico", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Diagnostico
		{
			get
			{
				return this._Diagnostico;
			}
			set
			{
				if ((this._Diagnostico != value))
				{
					this.OnDiagnosticoChanging(value);
					this.SendPropertyChanging();
					this._Diagnostico = value;
					this.SendPropertyChanged("Diagnostico");
					this.OnDiagnosticoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alergias", DbType="NVarChar(200)")]
		public string Alergias
		{
			get
			{
				return this._Alergias;
			}
			set
			{
				if ((this._Alergias != value))
				{
					this.OnAlergiasChanging(value);
					this.SendPropertyChanging();
					this._Alergias = value;
					this.SendPropertyChanged("Alergias");
					this.OnAlergiasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Cita", DbType="Int NOT NULL")]
		public int ID_Cita
		{
			get
			{
				return this._ID_Cita;
			}
			set
			{
				if ((this._ID_Cita != value))
				{
					if (this._Citas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CitaChanging(value);
					this.SendPropertyChanging();
					this._ID_Cita = value;
					this.SendPropertyChanged("ID_Cita");
					this.OnID_CitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Citas_Historial_Medico", Storage="_Citas", ThisKey="ID_Cita", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Citas Citas
		{
			get
			{
				return this._Citas.Entity;
			}
			set
			{
				Citas previousValue = this._Citas.Entity;
				if (((previousValue != value) 
							|| (this._Citas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Citas.Entity = null;
						previousValue.Historial_Medico.Remove(this);
					}
					this._Citas.Entity = value;
					if ((value != null))
					{
						value.Historial_Medico.Add(this);
						this._ID_Cita = value.id;
					}
					else
					{
						this._ID_Cita = default(int);
					}
					this.SendPropertyChanged("Citas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicos")]
	public partial class Medicos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Nombres;
		
		private string _Apellidos;
		
		private byte _Edad;
		
		private string _Rut;
		
		private System.Nullable<int> _ID_Especialidad;
		
		private string _Email;
		
		private bool _Disponible;
		
		private System.Nullable<int> _Telefono;
		
		private EntitySet<Citas> _Citas;
		
		private EntityRef<Especialidades> _Especialidades;
		
		private EntityRef<Telefonos> _Telefonos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNombresChanging(string value);
    partial void OnNombresChanged();
    partial void OnApellidosChanging(string value);
    partial void OnApellidosChanged();
    partial void OnEdadChanging(byte value);
    partial void OnEdadChanged();
    partial void OnRutChanging(string value);
    partial void OnRutChanged();
    partial void OnID_EspecialidadChanging(System.Nullable<int> value);
    partial void OnID_EspecialidadChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDisponibleChanging(bool value);
    partial void OnDisponibleChanged();
    partial void OnTelefonoChanging(System.Nullable<int> value);
    partial void OnTelefonoChanged();
    #endregion
		
		public Medicos()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			this._Especialidades = default(EntityRef<Especialidades>);
			this._Telefonos = default(EntityRef<Telefonos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombres", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombres
		{
			get
			{
				return this._Nombres;
			}
			set
			{
				if ((this._Nombres != value))
				{
					this.OnNombresChanging(value);
					this.SendPropertyChanging();
					this._Nombres = value;
					this.SendPropertyChanged("Nombres");
					this.OnNombresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellidos", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Apellidos
		{
			get
			{
				return this._Apellidos;
			}
			set
			{
				if ((this._Apellidos != value))
				{
					this.OnApellidosChanging(value);
					this.SendPropertyChanging();
					this._Apellidos = value;
					this.SendPropertyChanged("Apellidos");
					this.OnApellidosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Edad", DbType="TinyInt NOT NULL")]
		public byte Edad
		{
			get
			{
				return this._Edad;
			}
			set
			{
				if ((this._Edad != value))
				{
					this.OnEdadChanging(value);
					this.SendPropertyChanging();
					this._Edad = value;
					this.SendPropertyChanged("Edad");
					this.OnEdadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rut", DbType="NChar(9) NOT NULL", CanBeNull=false)]
		public string Rut
		{
			get
			{
				return this._Rut;
			}
			set
			{
				if ((this._Rut != value))
				{
					this.OnRutChanging(value);
					this.SendPropertyChanging();
					this._Rut = value;
					this.SendPropertyChanged("Rut");
					this.OnRutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Especialidad", DbType="Int")]
		public System.Nullable<int> ID_Especialidad
		{
			get
			{
				return this._ID_Especialidad;
			}
			set
			{
				if ((this._ID_Especialidad != value))
				{
					if (this._Especialidades.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_EspecialidadChanging(value);
					this.SendPropertyChanging();
					this._ID_Especialidad = value;
					this.SendPropertyChanged("ID_Especialidad");
					this.OnID_EspecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disponible", DbType="Bit NOT NULL")]
		public bool Disponible
		{
			get
			{
				return this._Disponible;
			}
			set
			{
				if ((this._Disponible != value))
				{
					this.OnDisponibleChanging(value);
					this.SendPropertyChanging();
					this._Disponible = value;
					this.SendPropertyChanged("Disponible");
					this.OnDisponibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="Int")]
		public System.Nullable<int> Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					if (this._Telefonos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_Citas", Storage="_Citas", ThisKey="id", OtherKey="ID_Medico")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidades_Medicos", Storage="_Especialidades", ThisKey="ID_Especialidad", OtherKey="id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Especialidades Especialidades
		{
			get
			{
				return this._Especialidades.Entity;
			}
			set
			{
				Especialidades previousValue = this._Especialidades.Entity;
				if (((previousValue != value) 
							|| (this._Especialidades.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especialidades.Entity = null;
						previousValue.Medicos.Remove(this);
					}
					this._Especialidades.Entity = value;
					if ((value != null))
					{
						value.Medicos.Add(this);
						this._ID_Especialidad = value.id;
					}
					else
					{
						this._ID_Especialidad = default(Nullable<int>);
					}
					this.SendPropertyChanged("Especialidades");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Telefonos_Medicos", Storage="_Telefonos", ThisKey="Telefono", OtherKey="id", IsForeignKey=true)]
		public Telefonos Telefonos
		{
			get
			{
				return this._Telefonos.Entity;
			}
			set
			{
				Telefonos previousValue = this._Telefonos.Entity;
				if (((previousValue != value) 
							|| (this._Telefonos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Telefonos.Entity = null;
						previousValue.Medicos.Remove(this);
					}
					this._Telefonos.Entity = value;
					if ((value != null))
					{
						value.Medicos.Add(this);
						this._Telefono = value.id;
					}
					else
					{
						this._Telefono = default(Nullable<int>);
					}
					this.SendPropertyChanged("Telefonos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pacientes")]
	public partial class Pacientes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Nombres;
		
		private string _Apellidos;
		
		private byte _Edad;
		
		private string _Rut;
		
		private string _Email;
		
		private int _Telefono;
		
		private EntitySet<Citas> _Citas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNombresChanging(string value);
    partial void OnNombresChanged();
    partial void OnApellidosChanging(string value);
    partial void OnApellidosChanged();
    partial void OnEdadChanging(byte value);
    partial void OnEdadChanged();
    partial void OnRutChanging(string value);
    partial void OnRutChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelefonoChanging(int value);
    partial void OnTelefonoChanged();
    #endregion
		
		public Pacientes()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombres", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombres
		{
			get
			{
				return this._Nombres;
			}
			set
			{
				if ((this._Nombres != value))
				{
					this.OnNombresChanging(value);
					this.SendPropertyChanging();
					this._Nombres = value;
					this.SendPropertyChanged("Nombres");
					this.OnNombresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellidos", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Apellidos
		{
			get
			{
				return this._Apellidos;
			}
			set
			{
				if ((this._Apellidos != value))
				{
					this.OnApellidosChanging(value);
					this.SendPropertyChanging();
					this._Apellidos = value;
					this.SendPropertyChanged("Apellidos");
					this.OnApellidosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Edad", DbType="TinyInt NOT NULL")]
		public byte Edad
		{
			get
			{
				return this._Edad;
			}
			set
			{
				if ((this._Edad != value))
				{
					this.OnEdadChanging(value);
					this.SendPropertyChanging();
					this._Edad = value;
					this.SendPropertyChanged("Edad");
					this.OnEdadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rut", DbType="NChar(9) NOT NULL", CanBeNull=false)]
		public string Rut
		{
			get
			{
				return this._Rut;
			}
			set
			{
				if ((this._Rut != value))
				{
					this.OnRutChanging(value);
					this.SendPropertyChanging();
					this._Rut = value;
					this.SendPropertyChanged("Rut");
					this.OnRutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="Int NOT NULL")]
		public int Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Citas", Storage="_Citas", ThisKey="id", OtherKey="ID_Paciente")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Secretarios")]
	public partial class Secretarios : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Nombres;
		
		private string _Apellidos;
		
		private byte _Edad;
		
		private string _Rut;
		
		private string _Email;
		
		private EntitySet<Citas> _Citas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNombresChanging(string value);
    partial void OnNombresChanged();
    partial void OnApellidosChanging(string value);
    partial void OnApellidosChanged();
    partial void OnEdadChanging(byte value);
    partial void OnEdadChanged();
    partial void OnRutChanging(string value);
    partial void OnRutChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Secretarios()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombres", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombres
		{
			get
			{
				return this._Nombres;
			}
			set
			{
				if ((this._Nombres != value))
				{
					this.OnNombresChanging(value);
					this.SendPropertyChanging();
					this._Nombres = value;
					this.SendPropertyChanged("Nombres");
					this.OnNombresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellidos", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Apellidos
		{
			get
			{
				return this._Apellidos;
			}
			set
			{
				if ((this._Apellidos != value))
				{
					this.OnApellidosChanging(value);
					this.SendPropertyChanging();
					this._Apellidos = value;
					this.SendPropertyChanged("Apellidos");
					this.OnApellidosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Edad", DbType="TinyInt NOT NULL")]
		public byte Edad
		{
			get
			{
				return this._Edad;
			}
			set
			{
				if ((this._Edad != value))
				{
					this.OnEdadChanging(value);
					this.SendPropertyChanging();
					this._Edad = value;
					this.SendPropertyChanged("Edad");
					this.OnEdadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rut", DbType="NChar(9) NOT NULL", CanBeNull=false)]
		public string Rut
		{
			get
			{
				return this._Rut;
			}
			set
			{
				if ((this._Rut != value))
				{
					this.OnRutChanging(value);
					this.SendPropertyChanging();
					this._Rut = value;
					this.SendPropertyChanged("Rut");
					this.OnRutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Secretarios_Citas", Storage="_Citas", ThisKey="id", OtherKey="ID_Paciente")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Secretarios = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Secretarios = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Telefonos")]
	public partial class Telefonos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _numero_Tel;
		
		private System.Nullable<int> _numero_Tel_OP;
		
		private EntitySet<Medicos> _Medicos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onnumero_TelChanging(int value);
    partial void Onnumero_TelChanged();
    partial void Onnumero_Tel_OPChanging(System.Nullable<int> value);
    partial void Onnumero_Tel_OPChanged();
    #endregion
		
		public Telefonos()
		{
			this._Medicos = new EntitySet<Medicos>(new Action<Medicos>(this.attach_Medicos), new Action<Medicos>(this.detach_Medicos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numero_Tel", DbType="Int NOT NULL")]
		public int numero_Tel
		{
			get
			{
				return this._numero_Tel;
			}
			set
			{
				if ((this._numero_Tel != value))
				{
					this.Onnumero_TelChanging(value);
					this.SendPropertyChanging();
					this._numero_Tel = value;
					this.SendPropertyChanged("numero_Tel");
					this.Onnumero_TelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numero_Tel_OP", DbType="Int")]
		public System.Nullable<int> numero_Tel_OP
		{
			get
			{
				return this._numero_Tel_OP;
			}
			set
			{
				if ((this._numero_Tel_OP != value))
				{
					this.Onnumero_Tel_OPChanging(value);
					this.SendPropertyChanging();
					this._numero_Tel_OP = value;
					this.SendPropertyChanged("numero_Tel_OP");
					this.Onnumero_Tel_OPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Telefonos_Medicos", Storage="_Medicos", ThisKey="id", OtherKey="Telefono")]
		public EntitySet<Medicos> Medicos
		{
			get
			{
				return this._Medicos;
			}
			set
			{
				this._Medicos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medicos(Medicos entity)
		{
			this.SendPropertyChanging();
			entity.Telefonos = this;
		}
		
		private void detach_Medicos(Medicos entity)
		{
			this.SendPropertyChanging();
			entity.Telefonos = null;
		}
	}
}
#pragma warning restore 1591
